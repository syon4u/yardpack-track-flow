
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { EnvironmentService } from '@/services/environmentService';

const envConfig = EnvironmentService.getEnvironmentConfig();

// Use fallback values if environment variables are missing
const SUPABASE_URL = envConfig.supabaseUrl || 'https://placeholder.supabase.co';
const SUPABASE_PUBLISHABLE_KEY = envConfig.supabaseAnonKey || 'placeholder-key';

// Log environment validation results
EnvironmentService.logEnvironmentInfo();

if (import.meta.env.DEV) {
  console.log('üîó Initializing Supabase client with URL:', SUPABASE_URL);
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  }
});

// Test connection on initialization only if we have valid configuration
if (envConfig.supabaseUrl && envConfig.supabaseAnonKey) {
  supabase.auth.getSession().then(({ data, error }) => {
    if (error) {
      if (import.meta.env.DEV) {
        console.error('‚ùå Supabase connection test failed:', error.message);
      }
    } else {
      if (import.meta.env.DEV) {
        console.log('‚úÖ Supabase client initialized successfully');
      }
    }
  }).catch((error) => {
    if (import.meta.env.DEV) {
      console.error('‚ùå Failed to test Supabase connection:', error);
    }
  });
} else {
  if (import.meta.env.DEV) {
    console.warn('‚ö†Ô∏è Supabase client initialized with fallback values - some features may not work');
  }
}
